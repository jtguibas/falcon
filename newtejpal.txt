<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
        integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
    <link href="https://use.fontawesome.com/releases/v5.0.7/css/all.css" rel="stylesheet" crossorigin="anonymous">
</head>

<body style="font-family: 'Roboto', sans-serif">
    <hr id="starter" style="height: 20px; background-image: linear-gradient(-90deg,#5e21d9,#12a5e2); margin: 0px">
    <div class="container">
        <div class="row">
            <div class="col-sm-10">
                <h4 class="pt-5 mb-1">Synthetic Medical Images from Dual Generative Adversarial Networks</h4>
                <p id="typed_wrap" class="text-muted">
                    John T. Guibas, Tejpal S. Virdi, Peter S. Li
                </p>
                <p style="text-align: justify; font-size: 14px;">
                    Currently there is strong interest in data-driven approaches to medical image classification.
                    However, medical imaging data is scarce, expensive, and fraught with legal concerns regarding
                    patient privacy. Typical consent forms only allow for patient data to be used in medical journals or
                    education, meaning the majority of medical data is inaccessible for general public research. We
                    propose a novel, two-stage pipeline for generating synthetic medical images from a pair of
                    generative adversarial networks, tested in practice on retinal fundi images. We develop a
                    hierarchical generation process to divide the complex image generation task into two parts: geometry
                    and photorealism. We hope researchers will use our pipeline to bring private medical data into the
                    public domain, sparking growth in imaging tasks that have previously relied on the hand-tuning of
                    models. We have begun this initiative through the development of SynthMed, an online repository for
                    synthetic medical images.
                </p>
            </div>
            <div class="col-sm-2">
                <h5 class="pt-5">More</h5>
                <a href="github.com/jtguibas" class="text-muted"><u>Paper</u></a> <br>
                <a href="github.com/jtguibas" class="text-muted"><u>Github</u></a> <br>
                <a href="github.com/jtguibas" class="text-muted"><u>Contact Authors</u></a> <br>
                <br>
 
            </div>
        </div>
 <div>
            <p class="text-muted" style="text-align: justify; font-size: 10px;">
                Note: The entered image should be a png of size {{config["input_width"]}} x {{config["input_height"]}}, it will automatically be resized if not.
            </p>

{% if config["input_type"] == "image" and config["output_type"] == "image" %}

<img src="img_lol">

{% endif %}

{% if config["input_type"] == "text" and config["output_type"] == "text" %}

<p id="text_lol"></p>

{% endif %}

{% if config["input_type"] == "image" and config["output_type"] == "text" %}

<p id="image_to_text"></p>

{% endif %}



<script>
var x = [0.3, 0.7, 0.2, 0.5, 0.4, 0.9, 0.1, 0.4]
var trace = {
    x: x,
    type: 'histogram',
  };

var data = [trace];

Plotly.newPlot('myDiv', data);

</script>

<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
</head>
<body>
{% if config["input_type"] == "image" %}

	<label for="avatar">Upload image:</label>

<form id="upload-file" method="post" enctype="multipart/form-data">
    <fieldset>
        <label for="file">Select a file</label>
        <input name="file" type="file">
    </fieldset>
</form>




{% endif %}


{% if config["input_type"] == "text" %}

	<label>Input text:</label>

	<textarea type="text"
	       id="avatar_text" name="avatar"
	       accept="text/*"></textarea>

{% endif %}


<button onclick="send()">Upload</button>

</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js" integrity="sha256-S1J4GVHHDMiirir9qsXWc8ZWw74PHHafpsHp5PXtjTs=" crossorigin="anonymous"></script>

<script>

function render(input) {
  // {% if config["input_type"] == "image" and config["output_type"] == "image" %}

  // document.getElementById("url_image").src = input;

  // {% endif %}  

  // {% if config["input_type"] == "image" and config["output_type"] == "text" %}

  // document.getElementById("image_to_text").src = input;

  // {% endif %}


  {% if config["input_type"] == "text" %}
    document.getElementById("text_xd_lol").innerHTML = input;

  {% endif %}  

}



function send() {

{% if config["input_type"] == "image" %}

        var form_data = new FormData($('#upload-file')[0]);

        var config_as_string = JSON.stringify({{config|tojson}})

        $.ajax({
            type: 'POST',
            url: 'http://167.71.146.40:5000/api/v1/falcon_incoming_request/{{config["input_type"]}}/' + config_as_string,
            data: form_data,
            contentType: false,
            cache: false,
            processData: false,
            success: function(data) {
                console.log('Success!');
            },
        });

{% endif %}



{% if config["input_type"] == "audio" %}

        var form_data = new FormData($('#upload-file')[0]);

        var config_as_string = JSON.stringify({{config|tojson}})

        $.ajax({
            type: 'POST',
            url: 'http://167.71.146.40:5000/api/v1/falcon_incoming_request/{{config["input_type"]}}/' + config_as_string,
            data: form_data,
            contentType: false,
            cache: false,
            processData: false,
            success: function(data) {
                console.log('Success!');
            },
        });

{% endif %}



{% if config["input_type"] == "text" %}
axios.post('http://167.71.146.40:5000/api/v1/falcon_incoming_request', {
    input_type: 'text',
    input_data: document.getElementById("avatar_text").value

  }).then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });

  {% endif %}

}


</script>

<footer class="footer mt-5">
            <p class="text-muted">
                Built with <u>Falcon</u> ðŸš€| <a href="">Download Static HTML</a>
            </p>
        </footer>

</html>